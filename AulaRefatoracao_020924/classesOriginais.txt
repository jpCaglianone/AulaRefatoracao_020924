
package br.edu.infnet.refactor;

public class Movie {
    public static final int CHILDRENS = 2;
    public static final int REGULAR = 0;
    public static final int NEW_RELEASE = 1;

    private String title;
    private int priceCode;

    public Movie(String title, int priceCode) {
        this.title = title;
        this.priceCode = priceCode;
    }

    public int getPriceCode() {
        return priceCode;
    }
    
    public void setPriceCode(int arg) {
        priceCode = arg;
    }

    public String getTitle() {
        return title;
    }
}

----------------------------------------------------------------------------------------------

package br.edu.infnet.refactor;

public class Rental {
    private Movie movie;
    private int daysRented;

    public Rental(Movie movie, int daysRented) {
        this.movie = movie;
        this.daysRented = daysRented;
    }
    
    public int getDaysRented() {
        return daysRented;
    }
    
    public Movie getMovie() {
        return movie;
    }    
}

------------------------------------------------------------------------------------------------

package br.edu.infnet.refactor;

import java.util.Enumeration;
import java.util.Vector;

public class Customer {
    private String name;
    private Vector rentals = new Vector();

    public Customer (String name){
        this.name = name;
    }

    public void addRental(Rental arg) {
        rentals.addElement(arg);
    }
    
    public String getName (){
        return name;
    }
    
    public String statement() {
        double totalAmount = 0;
        int frequentRenterPoints = 0;
        Enumeration rentalsEnum = rentals.elements();
        String result = "Rental Record for " + getName() + "\n";
        while (rentalsEnum.hasMoreElements()) {
            double thisAmount = 0;
            Rental each = (Rental) rentalsEnum.nextElement();
            //determine amounts for each line
            switch (each.getMovie().getPriceCode()) {
                case Movie.REGULAR:
                    thisAmount += 2;
                    if (each.getDaysRented() > 2)
                        thisAmount += (each.getDaysRented() - 2) * 1.5;
                    break;
                case Movie.NEW_RELEASE:
                    thisAmount += each.getDaysRented() * 3;
                    break;    
                case Movie.CHILDRENS:
                    thisAmount += 1.5;
                    if (each.getDaysRented() > 3)
                        thisAmount += (each.getDaysRented() - 3) * 1.5;
                    break;
            }
             // add frequent renter points
            frequentRenterPoints++;
            // add bonus for a two day new release rental
            if ((each.getMovie().getPriceCode() == Movie.NEW_RELEASE) &&
                each.getDaysRented() > 1) frequentRenterPoints ++;
            //show figures for this rental
            result += "\t" + each.getMovie().getTitle()+ "\t" +
                String.valueOf(thisAmount) + "\n";
            totalAmount += thisAmount;
        }
        //add footer lines
        result +=  "Amount owed is " + String.valueOf(totalAmount) + "\n";
        result += "You earned " + String.valueOf(frequentRenterPoints) +
             " frequent renter points";
        return result;
    }
}

------------------------------------------------------------------------------------------------------------------

package br.edu.infnet.refactor;

public class Main {
    public static void main(String[] args) {
        Movie movie0 = new Movie("Filme 0", 0);
        Movie movie1 = new Movie("Filme 1", 1);
        Movie movie2 = new Movie("Filme 2", 2);
        Rental rental0 = new Rental(movie0, 3);
        Rental rental1 = new Rental(movie1, 2);
        Rental rental2 = new Rental(movie2, 1);
        Customer cliente0 = new Customer("LP");
        cliente0.addRental(rental0);
        cliente0.addRental(rental1);
        cliente0.addRental(rental2);
        
        String result = cliente0.statement();
        System.out.println(result);
    }
}
